{"ast":null,"code":"import { InjectionToken } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const API_URL = new InjectionToken('API_URL');\nexport class ApiService {\n  constructor(httpClient, baseUrl) {\n    this.httpClient = httpClient;\n    this.baseUrl = baseUrl;\n  }\n  get(data) {\n    return this.httpClient.post(`${this.baseUrl}api/MontyHall/simulate`, data);\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(API_URL));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["InjectionToken","API_URL","ApiService","constructor","httpClient","baseUrl","get","data","post","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\mcs\\Downloads\\Monty-Hall-frontend\\Monty-Hall-frontend\\src\\app\\core\\services\\api.service.ts"],"sourcesContent":["import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nexport const API_URL = new InjectionToken<string>('API_URL');\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  constructor(private httpClient: HttpClient, @Inject(API_URL) private baseUrl: string) {}\n\n  get(data: any) {\n    return this.httpClient.post(`${this.baseUrl}api/MontyHall/simulate`, data);\n  }\n}\n"],"mappings":"AAAA,SAA6BA,cAAc,QAAQ,eAAe;;;AAGlE,OAAO,MAAMC,OAAO,GAAG,IAAID,cAAc,CAAS,SAAS,CAAC;AAK5D,OAAM,MAAOE,UAAU;EACrBC,YAAoBC,UAAsB,EAA2BC,OAAe;IAAhE,KAAAD,UAAU,GAAVA,UAAU;IAAuC,KAAAC,OAAO,GAAPA,OAAO;EAAW;EAEvFC,GAAGA,CAACC,IAAS;IACX,OAAO,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,OAAO,wBAAwB,EAAEE,IAAI,CAAC;EAC5E;EAAC,QAAAE,CAAA,G;qBALUP,UAAU,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAC+BV,OAAO;EAAA;EAAA,QAAAa,EAAA,G;WADhDZ,UAAU;IAAAa,OAAA,EAAVb,UAAU,CAAAc,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}